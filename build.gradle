plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'io.freefair.lombok' version '8.4'
}

group = 'it.fulminazzo'
version = '2.1'

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'io.freefair.lombok'

    group = "${rootProject.group}"
    version = "${rootProject.version}"

    repositories {
        mavenCentral()
        maven {
            name = 'bungeecord-repo'
            url = 'https://oss.sonatype.org/content/repositories/snapshots'
        }
        maven {
            name = 'fulminazzo'
            url = 'https://repo.fulminazzo.it/releases'
        }
    }

    dependencies {
        compileOnly libs.lombok
        annotationProcessor libs.lombok

        testCompileOnly libs.lombok
        testAnnotationProcessor libs.lombok

        compileOnly libs.annotations

        testImplementation platform(libs.junit.platform)
        testImplementation 'org.junit.jupiter:junit-jupiter'
        testImplementation 'org.junit.jupiter:junit-jupiter-params'

        testImplementation libs.mockito
    }

    test {
        useJUnitPlatform()
    }

    this.ext.getFileName = { name ->
        if (name == null) throw new RuntimeException("getFileName(): Name cannot be null!")
        String fileName = name
        final String projectName = rootProject.name
        if (projectName != fileName) fileName = "${projectName}-" + fileName
        return fileName + "-${rootProject.version}"
    }

    shadowJar {
        exclude("META-INF/**") // Removes all Maven META-INF/ files.
        archiveFileName = "${getFileName(project.name)}.jar"

        // Leave FulmiCollection ClassUtils class.
        exclude 'it/fulminazzo/fulmicollection/*.class'
        for (String c : 'a'..'z')
            if (c != "u") exclude "it/fulminazzo/fulmicollection/${c}*/**"
            else
                for (String d : 'A'..'Z')
                    if (d != "C") exclude "it/fulminazzo/fulmicollection/${c}*/${d}*"

        manifest {
            attributes ("Manifest-Version": "${rootProject.version}")
        }
    }

    tasks.register('sourcesJar', Jar) {
        from sourceSets.main.delombokTask
        archiveClassifier = 'sources'
    }

    tasks.register('javadocJar', Jar) {
        from javadoc
        archiveClassifier = 'javadoc'
    }

    jar {
        enabled = true // Required for sub projects depending on sub projects
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        archiveFileName = "${getFileName(project.name)}-original.jar"
        dependsOn(shadowJar)
        manifest {
            attributes ("Manifest-Version": "${rootProject.version}")
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                String projectName = "${project.name}"
                String rootProjectName = "${rootProject.name}"
                groupId = "${rootProject.group}" + (projectName == rootProjectName ? "" : ".${rootProjectName}")
                artifactId = "${project.name}"
                version = "${rootProject.version}"

                from components.java
                artifact sourcesJar
                artifact javadocJar
            }
        }

        repositories {
            maven {
                url 'https://repo.fulminazzo.it/releases'
                credentials {
                    username = System.getenv('REPO_USERNAME')
                    password = System.getenv('REPO_PASSWORD')
                }
                authentication {
                    basic(BasicAuthentication)
                }
            }
        }
    }
}

dependencies {
    subprojects.each {api project(it.path)}
}

